apiVersion: v1
kind: Namespace
metadata:
  name: promptsales-prod

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: promptsales-api
  namespace: promptsales-prod
  labels: { app: promptsales, component: api }
spec:
  # Base: ~4 pods (~100k req/min con margen). HPA ajustará.
  replicas: 4
  selector:
    matchLabels: { app: promptsales, component: api }
  template:
    metadata:
      labels: { app: promptsales, component: api }
    spec:
      # Programa en el nodegroup r7i.2xlarge
      nodeSelector:
        node.kubernetes.io/instance-type: r7i.2xlarge
      containers:
        - name: api
          image: <registry>/promptsales-api:latest
          ports: [{ containerPort: 8000 }]
          env:
            - { name: DJANGO_SETTINGS_MODULE, value: config.settings.prod }
            - name: DATABASE_URL
              valueFrom: { secretKeyRef: { name: mysql-conn, key: url } }
            - { name: GUNICORN_WORKERS, value: "4" }    # ≈ 1 worker por vCPU del pod
            - { name: GUNICORN_THREADS, value: "2" }
          resources:
            # QoS Guaranteed (requests == limits)
            requests: { cpu: "4", memory: "8Gi" }
            limits:   { cpu: "4", memory: "8Gi" }

---
apiVersion: v1
kind: Service
metadata:
  name: promptsales-api-svc
  namespace: promptsales-prod
  labels: { app: promptsales, component: api }
spec:
  selector: { app: promptsales, component: api }
  ports:
    - { name: http, port: 80, targetPort: 8000 }
  type: ClusterIP

---
# HPA v2: CPU, Memoria y Solicitudes Concurrentes (Pods metric)
# Requiere Prometheus + kube-state-metrics + Prometheus Adapter mapeando `http_requests_inflight`
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: promptsales-api-hpa
  namespace: promptsales-prod
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: promptsales-api
  # Mínimo conservador y techo de 30 (≈x10)
  minReplicas: 3
  maxReplicas: 30
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 30
      policies:
        - { type: Percent, value: 100, periodSeconds: 30 }
        - { type: Pods,    value: 10,  periodSeconds: 30 }
    scaleDown:
      stabilizationWindowSeconds: 120
      policies:
        - { type: Percent, value: 50,  periodSeconds: 60 }
  metrics:
    - type: Resource
      resource: { name: cpu,    target: { type: Utilization, averageUtilization: 70 } }
    - type: Resource
      resource: { name: memory, target: { type: Utilization, averageUtilization: 70 } }
    - type: Pods
      pods:
        metric: { name: http_requests_inflight }
        target: { type: AverageValue, averageValue: "50" }  # ajusta según tu p95/cola
